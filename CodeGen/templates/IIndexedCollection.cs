//
// <%=$cur_coll.intf%>.cs
//
// Author:
//   Jb Evain (jbevain@gmail.com)
//
// Generated by /CodeGen/cecil-gen.rb do not edit
// <%=Time.now%>
//
// (C) 2005 Jb Evain
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

namespace <%=$cur_coll.target%> {

	using System;
	using System.Collections;

	public class <%=$cur_coll.item_name%>EventArgs : EventArgs {

		private <%=$cur_coll.type%> m_item;

		public <%=$cur_coll.type%> <%=$cur_coll.item_name%> {
			get { return m_item; }
		}

		public <%=$cur_coll.item_name%>EventArgs (<%=$cur_coll.type%> item)
		{
			m_item = item;
		}
	}

	public delegate void <%=$cur_coll.item_name%>EventHandler (
		object sender, <%=$cur_coll.item_name%>EventArgs ea);

	public interface <%=$cur_coll.intf%> : IIndexedCollection<% if (!$cur_coll.visitable.nil?) then %>, <%=$cur_coll.visitable%><% end %> {

		new <%=$cur_coll.type%> this [int index] { get; }

		<%=$cur_coll.container%> Container { get; }

		event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Added;
		event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Removed;

<% if $cur_coll.type != "Instruction" %>		void Add (<%=$cur_coll.type%> value);
<% end %>		void Clear ();
		bool Contains (<%=$cur_coll.type%> value);
		int IndexOf (<%=$cur_coll.type%> value);
<% if $cur_coll.type != "Instruction" %>		void Insert (int index, <%=$cur_coll.type%> value);
		void Remove (<%=$cur_coll.type%> value);
		void RemoveAt (int index);
<% end
	case $cur_coll.item_name
		when "MethodDefinition"
		%>
		MethodDefinition [] GetMethod (string name);
		MethodDefinition GetMethod (string name, Type [] parameters);
		MethodDefinition GetMethod (string name, TypeReference [] parameters);
		MethodDefinition GetMethod (string name, ParameterDefinitionCollection parameters);
<%
		when "FieldDefinition"
%>
		FieldDefinition GetField (string name);
<%
		when "Constructor"
%>
		MethodDefinition GetConstructor (bool isStatic, Type [] parameters);
		MethodDefinition GetConstructor (bool isStatic, TypeReference [] parameters);
		MethodDefinition GetConstructor (bool isStatic, ParameterDefinitionCollection parameters);
<%
		when "EventDefinition"
%>
		EventDefinition GetEvent (string name);
<%
		when "PropertyDefinition"
%>
		PropertyDefinition [] GetProperties (string name);
<%
	end %>	}
}
