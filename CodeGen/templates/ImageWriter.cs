/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * <%=Time.now%>
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

	using System;
	using System.IO;
	using System.Text;

	using Mono.Cecil;
	using Mono.Cecil.Metadata;

	internal sealed class ImageWriter : IBinaryVisitor {

		private BinaryWriter m_binaryWriter;

		public ImageWriter (MetadataWriter writer)
		{
			m_binaryWriter = writer.GetWriter ();
		}

		public void Visit (Image img)
		{
		}

		public void Visit (DOSHeader header)
		{
			m_binaryWriter.Write (header.Start);
			m_binaryWriter.Write (header.Lfanew);
			m_binaryWriter.Write (header.End);
			
			m_binaryWriter.Write ((ushort) 0x4550);
			m_binaryWriter.Write ((ushort) 0);
		}

		public void Visit (PEOptionalHeader header)
		{
		}
<% $headers.each { |name, header| if name != "Section" && name != "CLIHeader" %>
		public void Visit (<%=name%> header)
		{<% header.fields.each { |field| %>
			<%=field.write_binary("header", "m_binaryWriter")%>;<% } %>
		}
<% end } %>
		public void Visit (SectionCollection coll)
		{
		}
<% cur_header = $headers["Section"] %>
		public void Visit (Section sect)
		{
			foreach (char c in sect.Name)
				m_binaryWriter.Write ((sbyte) c);
			m_binaryWriter.Write ((sbyte) '\0');
<% cur_header.fields.each { |field| %>
			<%=field.write_binary("sect", "m_binaryWriter")%>;<% } %>
		}

		public void Visit (ImportAddressTable iat)
		{
			m_binaryWriter.Write (iat.HintNameTableRVA.Value);
		}
<% cur_header = $headers["CLIHeader"] %>
		public void Visit (CLIHeader header)
		{<% cur_header.fields.each { |field| %>
			<%=field.write_binary("header", "m_binaryWriter")%>;<% } %>
		}

		public void Visit (ImportTable it)
		{
			m_binaryWriter.Write (it.ImportAddressTable.Value);
			m_binaryWriter.Write (it.DateTimeStamp);
			m_binaryWriter.Write (it.ForwardChain);
			m_binaryWriter.Write (it.Name.Value);
			m_binaryWriter.Write (it.ImportAddressTable.Value);
		}

		public void Visit (ImportLookupTable ilt)
		{
			m_binaryWriter.Write (ilt.HintNameRVA.Value);
		}

		public void Visit (HintNameTable hnt)
		{
			m_binaryWriter.Write (hnt.Hint);
			m_binaryWriter.Write (hnt.RuntimeMain);
			m_binaryWriter.Write ('\0');
			m_binaryWriter.Write (hnt.RuntimeLibrary);
			m_binaryWriter.Write ('\0');

			// ep + rva
		}

		public void Terminate (Image img)
		{
		}
	}
}
