/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * <%=Time.now%>
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

	using System;
	using System.IO;
	using System.Text;

	using Mono.Cecil;
	using Mono.Cecil.Metadata;

	internal sealed class ImageWriter : BaseImageVisitor {

		private Image m_img;
		private BinaryWriter m_binaryWriter;

		private BinaryWriter m_resWriter;
		private BinaryWriter m_textWriter;

		public ImageWriter (MetadataWriter writer, BinaryWriter bw)
		{
			m_img = writer.GetMetadataRoot ().GetImage ();
			m_binaryWriter = bw;

			m_textWriter = new BinaryWriter (new MemoryStream ());
			m_textWriter.BaseStream.Position = 80;
		}

		public Image GetImage ()
		{
			return m_img;
		}

		public BinaryWriter GetTextWriter ()
		{
			return m_textWriter;
		}

		public uint AddResource (byte [] res)
		{
			if (m_resWriter == null) {
				Section rs = new Section ();
				rs.Name = ".res";
				rs.Characteristics = SectionCharacteristics.ContainsInitializedData |
					SectionCharacteristics.MemoryRead; 
				m_img.Sections.Add (rs);
				m_resWriter = new BinaryWriter (new MemoryStream ());
			}

			uint offset = (uint) m_resWriter.BaseStream.Position;
			m_resWriter.Write (res);
			return offset;
		}

		public override void Visit (Image img)
		{
			// size computations, fields setting, etc.
			img.PEFileHeader.NumberOfSections = (ushort) img.Sections.Count;
		}

		public override void Visit (DOSHeader header)
		{
			m_binaryWriter.Write (header.Start);
			m_binaryWriter.Write (header.Lfanew);
			m_binaryWriter.Write (header.End);

			m_binaryWriter.Write ((ushort) 0x4550);
			m_binaryWriter.Write ((ushort) 0);
		}
<% $headers.each { |name, header| if name != "Section" && name != "CLIHeader" %>
		public override void Visit (<%=name%> header)
		{<% header.fields.each { |field| %>
			<%=field.write_binary("header", "m_binaryWriter")%>;<% } %>
		}
<% end } %>
<% cur_header = $headers["Section"] %>
		public override void Visit (Section sect)
		{
			m_binaryWriter.Write (sect.Name);
			int more = 8 - sect.Name.Length;
			for (int i = 0; i < more; i++)
				m_binaryWriter.Write ((byte) 0);
<% cur_header.fields.each { |field| %>
			<%=field.write_binary("sect", "m_binaryWriter")%>;<% } %>
		}

		public override void Visit (ImportAddressTable iat)
		{
			m_textWriter.Write (iat.HintNameTableRVA.Value);
		}
<% cur_header = $headers["CLIHeader"] %>
		public override void Visit (CLIHeader header)
		{<% cur_header.fields.each { |field| %>
			<%=field.write_binary("header", "m_textWriter")%>;<% } %>
		}

		public override void Visit (ImportTable it)
		{
			m_textWriter.Write (it.ImportAddressTable.Value);
			m_textWriter.Write (it.DateTimeStamp);
			m_textWriter.Write (it.ForwardChain);
			m_textWriter.Write (it.Name.Value);
			m_textWriter.Write (it.ImportAddressTable.Value);
		}

		public override void Visit (ImportLookupTable ilt)
		{
			m_textWriter.Write (ilt.HintNameRVA.Value);
		}

		public override void Visit (HintNameTable hnt)
		{
			m_textWriter.Write (hnt.Hint);
			m_textWriter.Write (hnt.RuntimeMain);
			m_textWriter.Write ('\0');
			m_textWriter.Write (hnt.RuntimeLibrary);
			m_textWriter.Write ('\0');

			m_textWriter.Write (hnt.EntryPoint);
			m_textWriter.Write (hnt.RVA);
		}

		public override void Terminate (Image img)
		{
			// write sections, align the whole thing
		}
	}
}
