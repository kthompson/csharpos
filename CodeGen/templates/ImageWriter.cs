/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * <%=Time.now%>
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

	using System;
	using System.IO;
	using System.Text;

	using Mono.Cecil;
	using Mono.Cecil.Metadata;

	internal sealed class ImageWriter : BaseImageVisitor {

		private Image m_img;
		private BinaryWriter m_binaryWriter;

		private BinaryWriter m_textWriter;
		private BinaryWriter m_relocWriter;

		public ImageWriter (MetadataWriter writer, BinaryWriter bw)
		{
			m_img = writer.GetMetadataRoot ().GetImage ();
			m_binaryWriter = bw;

			m_textWriter = new BinaryWriter (new MemoryStream ());
			m_textWriter.BaseStream.Position = 80;
			m_relocWriter = new BinaryWriter (new MemoryStream ());
		}

		public Image GetImage ()
		{
			return m_img;
		}

		public BinaryWriter GetTextWriter ()
		{
			return m_textWriter;
		}

		public uint GetAligned (uint integer, uint alignWith)
		{
			return (integer + alignWith - 1) & ~(alignWith - 1);
		}

		public void Initialize ()
		{
			Image img = m_img;
			uint sectAlign = img.PEOptionalHeader.NTSpecificFields.SectionAlignment;
			uint fileAlign = img.PEOptionalHeader.NTSpecificFields.FileAlignment;

			Section txtSec = img.TextSection;
			Section relocSec = null;
			foreach (Section s in img.Sections)
				if (s.Name == Section.Relocs)
					relocSec = s;

			txtSec.VirtualSize = (uint) m_textWriter.BaseStream.Length;
			relocSec.VirtualSize = (uint) m_relocWriter.BaseStream.Length;

			// size computations, fields setting, etc.
			uint nbSects = (uint) img.Sections.Count;
			img.PEFileHeader.NumberOfSections = (ushort) nbSects;

			// build the reloc section data
			uint relocSize = 12;
			m_relocWriter.Write ((uint) 0x200);
			m_relocWriter.Write (relocSize);
			m_relocWriter.Write ((ushort) (3 << (int) relocSize) + 2);
			m_relocWriter.Write ((ushort) 0);

			// start counting before sections headers
			// section start + section header sixe * number of sections
			uint headersEnd = 0x178 + 0x28 * nbSects;
			uint fileOffset = headersEnd;
			uint sectOffset = sectAlign;
			uint imageSize = 0;

			foreach (Section sect in img.Sections) {
				fileOffset = GetAligned (fileOffset, fileAlign);
				sectOffset = GetAligned (sectOffset, sectAlign);

				sect.PointerToRawData = fileOffset;
				sect.VirtualAddress = new RVA (sectOffset);
				sect.SizeOfRawData = GetAligned (sect.VirtualSize, fileAlign);

				fileOffset += sect.SizeOfRawData;
				sectOffset += sect.SizeOfRawData;
				imageSize += GetAligned (sect.SizeOfRawData, sectAlign);
			}

			if (txtSec.VirtualAddress.Value != 0x2000)
				throw new ImageFormatException ("Wrong RVA for .text section");

			img.PEOptionalHeader.StandardFields.CodeSize = GetAligned (
				txtSec.SizeOfRawData, fileAlign);
			img.PEOptionalHeader.StandardFields.BaseOfCode = txtSec.VirtualAddress;

			imageSize += headersEnd;
			img.PEOptionalHeader.NTSpecificFields.ImageSize = GetAligned (imageSize, sectAlign);
		}

		public override void Visit (DOSHeader header)
		{
			m_binaryWriter.Write (header.Start);
			m_binaryWriter.Write (header.Lfanew);
			m_binaryWriter.Write (header.End);

			m_binaryWriter.Write ((ushort) 0x4550);
			m_binaryWriter.Write ((ushort) 0);
		}
<% $headers.each { |name, header| if name != "Section" && name != "CLIHeader" %>
		public override void Visit (<%=name%> header)
		{<% header.fields.each { |field| %>
			<%=field.write_binary("header", "m_binaryWriter")%>;<% } %>
		}
<% end } ; cur_header = $headers["Section"] %>
		public override void Visit (Section sect)
		{
			m_binaryWriter.Write (sect.Name);
			int more = 8 - sect.Name.Length;
			for (int i = 0; i < more; i++)
				m_binaryWriter.Write ((byte) 0);
<% cur_header.fields.each { |field| %>
			<%=field.write_binary("sect", "m_binaryWriter")%>;<% } %>
		}

		public override void Visit (ImportAddressTable iat)
		{
			m_textWriter.BaseStream.Position = 0;
			m_textWriter.Write (iat.HintNameTableRVA.Value);
		}
<% cur_header = $headers["CLIHeader"] %>
		public override void Visit (CLIHeader header)
		{<% cur_header.fields.each { |field| %>
			<%=field.write_binary("header", "m_textWriter")%>;<% } %>
		}

		public override void Visit (ImportTable it)
		{
			m_textWriter.BaseStream.Position = m_img.ResolveTextVirtualAddress (
				m_img.PEOptionalHeader.DataDirectories.ImportTable.VirtualAddress);
			m_textWriter.Write (it.ImportAddressTable.Value);
			m_textWriter.Write (it.DateTimeStamp);
			m_textWriter.Write (it.ForwardChain);
			m_textWriter.Write (it.Name.Value);
			m_textWriter.Write (it.ImportAddressTable.Value);
		}

		public override void Visit (ImportLookupTable ilt)
		{
			m_textWriter.Write (ilt.HintNameRVA.Value);
		}

		public override void Visit (HintNameTable hnt)
		{
			m_textWriter.Write (hnt.Hint);
			m_textWriter.Write (hnt.RuntimeMain);
			m_textWriter.Write ('\0');
			m_textWriter.Write (hnt.RuntimeLibrary);
			m_textWriter.Write ('\0');

			// patch header with ep rva
			RVA ep = m_img.TextSection.VirtualAddress +
				(uint) m_textWriter.BaseStream.Position;
			long pos = m_binaryWriter.BaseStream.Position;
			m_binaryWriter.BaseStream.Position = 0xa8;
			m_binaryWriter.Write (ep.Value);
			m_binaryWriter.BaseStream.Position = pos;
			m_textWriter.Write (hnt.EntryPoint);
			m_textWriter.Write (hnt.RVA);
		}

		public override void Terminate (Image img)
		{
			// write sections, align the whole thing
		}
	}
}
