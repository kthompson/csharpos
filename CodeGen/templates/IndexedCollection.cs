//
// <%=$cur_coll.name%>.cs
//
// Author:
//   Jb Evain (jbevain@gmail.com)
//
// Generated by /CodeGen/cecil-gen.rb do not edit
// <%=Time.now%>
//
// (C) 2005 Jb Evain
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
<%
def member_visibility()
	return $cur_coll.type == "Instruction" ? "internal" : "public"
end

def use_event?()
	case $cur_coll.name
		when "NestedTypeCollection", "MethodDefinitionCollection", "ConstructorCollection", "FieldDefinitionCollection", "EventDefinitionCollection", "PropertyDefinitionCollection"
			return true
	end

	return false
end

%>
namespace <%=$cur_coll.target%> {

	using System;
	using System.Collections;

	using Mono.Cecil.Cil;

	public sealed class <%=$cur_coll.name%> : IIndexedCollection<% if (!$cur_coll.visitable.nil?) then %>, <%=$cur_coll.visitable%><% end %> {

		IList m_items;
		<%=$cur_coll.container_impl%> m_container;

		public <%=$cur_coll.type%> this [int index] {
			get { return m_items [index] as <%=$cur_coll.type%>; }
			set { m_items [index] = value; }
		}

		object IIndexedCollection.this [int index] {
			get { return m_items [index]; }
		}

		public <%=$cur_coll.container%> Container {
			get { return m_container; }
		}

		public int Count {
			get { return m_items.Count; }
		}

		public bool IsSynchronized {
			get { return false; }
		}

		public object SyncRoot {
			get { return this; }
		}

		public <%=$cur_coll.name%> (<%=$cur_coll.container_impl%> container)
		{
			m_container = container;
			m_items = new ArrayList ();
		}

		<%= member_visibility() %> void Add (<%=$cur_coll.type%> value)
		{<%
if use_event?() %>
			if (!this.Contains (value))
				Attach (value);
<% end %>
			m_items.Add (value);
		}

		public void Clear ()
		{<%
if use_event?() %>
			foreach (<%=$cur_coll.type%> item in this)
				Detach (item);
<% end %>
			m_items.Clear ();
		}

		public bool Contains (<%=$cur_coll.type%> value)
		{
			return m_items.Contains (value);
		}

		public int IndexOf (<%=$cur_coll.type%> value)
		{
			return m_items.IndexOf (value);
		}

		<%= member_visibility() %> void Insert (int index, <%=$cur_coll.type%> value)
		{<%
if use_event?() %>
			if (!this.Contains (value))
				Attach (value);
<% end %>
			m_items.Insert (index, value);
		}

		<%= member_visibility() %> void Remove (<%=$cur_coll.type%> value)
		{<%
if use_event?() %>
			if (this.Contains (value))
				Detach (value);
<% end %>
			m_items.Remove (value);
		}

		<%= member_visibility() %> void RemoveAt (int index)
		{<%
if use_event?() %>
			Detach (this [index]);
<% end %>
			m_items.RemoveAt (index);
		}

		public void CopyTo (Array array, int index)
		{
			m_items.CopyTo (array, index);
		}

		public IEnumerator GetEnumerator ()
		{
			return m_items.GetEnumerator ();
		}
<%
	case $cur_coll.item_name
		when "MethodDefinition"
%>
		public MethodDefinition [] GetMethod (string name)
		{
			ArrayList ret = new ArrayList ();
			foreach (MethodDefinition meth in this)
				if (meth.Name == name)
					ret.Add (meth);

			return ret.ToArray (typeof (MethodDefinition)) as MethodDefinition [];
		}

		public MethodDefinition GetMethod (string name, Type [] parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return meth;
					for (int i = 0; i < parameters.Length; i++)
						if (meth.Parameters [i].ParameterType.FullName == ReflectionHelper.GetTypeSignature (parameters [i]))
							return meth;
				}
			return null;
		}

		public MethodDefinition GetMethod (string name, TypeReference [] parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return meth;
					for (int i = 0; i < parameters.Length; i++)
						if (meth.Parameters [i].ParameterType.FullName == parameters [i].FullName)
							return meth;
				}
			return null;
		}

		public MethodDefinition GetMethod (string name, ParameterDefinitionCollection parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Count) {
					if (parameters.Count == 0)
						return meth;
					for (int i = 0; i < parameters.Count; i++)
						if (meth.Parameters [i].ParameterType.FullName == parameters [i].ParameterType.FullName)
							return meth;
				}
			return null;
		}
<%
		when "FieldDefinition"
%>
		public FieldDefinition GetField (string name)
		{
			foreach (FieldDefinition field in this)
				if (field.Name == name)
					return field;

			return null;
		}
<%
		when "Constructor"
%>
		public MethodDefinition GetConstructor (bool isStatic, Type [] parameters)
		{
			foreach (MethodDefinition ctor in this) {
				if (ctor.IsStatic == isStatic && ctor.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return ctor;
					for (int i = 0; i < parameters.Length; i++)
						if (ctor.Parameters [i].ParameterType.FullName ==  ReflectionHelper.GetTypeSignature (parameters [i]))
							return ctor;
				}
			}

			return null;
		}

		public MethodDefinition GetConstructor (bool isStatic, TypeReference [] parameters)
		{
			foreach (MethodDefinition ctor in this)
				if (ctor.IsStatic == isStatic && ctor.Parameters.Count == parameters.Length)
					for (int i = 0; i < parameters.Length; i++)
						if (ctor.Parameters [i].ParameterType.FullName == parameters [i].FullName)
							return ctor;

			return null;
		}

		public MethodDefinition GetConstructor (bool isStatic, ParameterDefinitionCollection parameters)
		{
			foreach (MethodDefinition ctor in this)
				if (ctor.IsStatic == isStatic && ctor.Parameters.Count == parameters.Count) {
					if (parameters.Count == 0)
						return ctor;
					for (int i = 0; i < parameters.Count; i++)
						if (ctor.Parameters [i].ParameterType.FullName == parameters [i].ParameterType.FullName)
							return ctor;
				}
			return null;
		}
<%
		when "EventDefinition"
%>
		public EventDefinition GetEvent (string name)
		{
			foreach (EventDefinition evt in this)
				if (evt.Name == name)
					return evt;

			return null;
		}
<%
		when "PropertyDefinition"
%>
		public PropertyDefinition [] GetProperties (string name)
		{
			ArrayList ret = new ArrayList ();
			foreach (PropertyDefinition prop in this)
				if (prop.Name == name)
					ret.Add (prop);

			return ret.ToArray (typeof (PropertyDefinition)) as PropertyDefinition [];
		}
<%
	end

	if use_event?()
%>
		void Attach (MemberReference member)
		{
			if (member.DeclaringType != null)
				throw new ReflectionException ("Member already attached, clone it instead");

			member.DeclaringType = m_container;
		}

		void Detach (MemberReference member)
		{
			member.DeclaringType = null;
		}
<% end
  if !$cur_coll.visitor.nil? then %>
		public void Accept (<%=$cur_coll.visitor%> visitor)
		{
			visitor.<%=$cur_coll.visitThis%> (this);
		}
<% end %>	}
}
