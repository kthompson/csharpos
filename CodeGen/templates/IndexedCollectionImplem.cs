/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * <%=Time.now%>
 *
 *****************************************************************************/

namespace Mono.Cecil.Implem {

	using System;
	using System.Collections;

	using Mono.Cecil;
	using Mono.Cecil.Cil;

	internal class <%=$cur_coll.name%> : <%=$cur_coll.intf%> {

		private IList m_items;
		private <%=$cur_coll.container_impl%> m_container;

		public event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Added;
		public event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Removed;

		public <%=$cur_coll.type%> this [int index] {
			get { return m_items [index] as <%=$cur_coll.type%>; }
			set { m_items [index] = value; }
		}

		public <%=$cur_coll.container%> Container {
			get { return m_container; }
		}

		public int Count {
			get { return m_items.Count; }
		}

		public bool IsSynchronized {
			get { return false; }
		}

		public object SyncRoot {
			get { return this; }
		}

		public <%=$cur_coll.name%> (<%=$cur_coll.container_impl%> container)
		{
			m_container = container;
			m_items = new ArrayList ();
		}

		public void Add (<%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Added != null && !this.Contains (value))
				On<%=$cur_coll.item_name%>Added (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Add (value);
		}

		public void Clear ()
		{
			if (On<%=$cur_coll.item_name%>Removed != null)
				foreach (<%=$cur_coll.type%> item in this)
					On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (item));
			m_items.Clear ();
		}

		public bool Contains (<%=$cur_coll.type%> value)
		{
			return m_items.Contains (value);
		}

		public int IndexOf (<%=$cur_coll.type%> value)
		{
			return m_items.IndexOf (value);
		}

		public void Insert (int index, <%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Added != null && !this.Contains (value))
				On<%=$cur_coll.item_name%>Added (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Insert (index, value);
		}

		public void Remove (<%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Removed != null && this.Contains (value))
				On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Remove (value);
		}

		public void RemoveAt (int index)
		{
			if (On<%=$cur_coll.item_name%>Removed != null)
				On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (this [index]));
			m_items.Remove (index);
		}

		public void CopyTo (Array ary, int index)
		{
			m_items.CopyTo (ary, index);
		}

		public IEnumerator GetEnumerator ()
		{
			return m_items.GetEnumerator ();
		}
<% if !$cur_coll.visitor.nil? then %>
		public void Accept (<%=$cur_coll.visitor%> visitor)
		{
			visitor.<%=$cur_coll.visitThis%> (this);
		}
<% end %>	}
}
