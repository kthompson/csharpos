//
// <%=$cur_coll.name%>.cs
//
// Author:
//   Jb Evain (jbevain@gmail.com)
//
// Generated by /CodeGen/cecil-gen.rb do not edit
// <%=Time.now%>
//
// (C) 2005 Jb Evain
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

namespace <%=$cur_coll.target%> {

	using System;
	using System.Collections;

	using Mono.Cecil.Cil;

	public sealed class <%=$cur_coll.name%> : <%=$cur_coll.intf%> {

		IList m_items;
		<%=$cur_coll.container_impl%> m_container;

		public event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Added;
		public event <%=$cur_coll.item_name%>EventHandler On<%=$cur_coll.item_name%>Removed;

		public <%=$cur_coll.type%> this [int index] {
			get { return m_items [index] as <%=$cur_coll.type%>; }
			set { m_items [index] = value; }
		}

		public <%=$cur_coll.container%> Container {
			get { return m_container; }
		}

		public int Count {
			get { return m_items.Count; }
		}

		public bool IsSynchronized {
			get { return false; }
		}

		public object SyncRoot {
			get { return this; }
		}

		public <%=$cur_coll.name%> (<%=$cur_coll.container_impl%> container)
		{
			m_container = container;
			m_items = new ArrayList ();
		}

		public void Add (<%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Added != null && !this.Contains (value))
				On<%=$cur_coll.item_name%>Added (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Add (value);
		}

		public void Clear ()
		{
			if (On<%=$cur_coll.item_name%>Removed != null)
				foreach (<%=$cur_coll.type%> item in this)
					On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (item));
			m_items.Clear ();
		}

		public bool Contains (<%=$cur_coll.type%> value)
		{
			return m_items.Contains (value);
		}

		public int IndexOf (<%=$cur_coll.type%> value)
		{
			return m_items.IndexOf (value);
		}

		public void Insert (int index, <%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Added != null && !this.Contains (value))
				On<%=$cur_coll.item_name%>Added (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Insert (index, value);
		}

		public void Remove (<%=$cur_coll.type%> value)
		{
			if (On<%=$cur_coll.item_name%>Removed != null && this.Contains (value))
				On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (value));
			m_items.Remove (value);
		}

		public void RemoveAt (int index)
		{
			if (On<%=$cur_coll.item_name%>Removed != null)
				On<%=$cur_coll.item_name%>Removed (this, new <%=$cur_coll.item_name%>EventArgs (this [index]));
			m_items.Remove (index);
		}

		public void CopyTo (Array ary, int index)
		{
			m_items.CopyTo (ary, index);
		}

		public IEnumerator GetEnumerator ()
		{
			return m_items.GetEnumerator ();
		}
<%
	case $cur_coll.item_name
		when "MethodDefinition"
%>
		public MethodDefinition [] GetMethod (string name)
		{
			ArrayList ret = new ArrayList ();
			foreach (MethodDefinition meth in this)
				if (meth.Name == name)
					ret.Add (meth);

			return ret.ToArray (typeof (MethodDefinition)) as MethodDefinition [];
		}

		public MethodDefinition GetMethod (string name, Type [] parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return meth;
					for (int i = 0; i < parameters.Length; i++)
						if (meth.Parameters [i].ParameterType.FullName == ReflectionHelper.GetTypeSignature (parameters [i]))
							return meth;
				}
			return null;
		}

		public MethodDefinition GetMethod (string name, ITypeReference [] parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return meth;
					for (int i = 0; i < parameters.Length; i++)
						if (meth.Parameters [i].ParameterType.FullName == parameters [i].FullName)
							return meth;
				}
			return null;
		}

		public MethodDefinition GetMethod (string name, ParameterDefinitionCollection parameters)
		{
			foreach (MethodDefinition meth in this)
				if (meth.Name == name && meth.Parameters.Count == parameters.Count) {
					if (parameters.Count == 0)
						return meth;
					for (int i = 0; i < parameters.Count; i++)
						if (meth.Parameters [i].ParameterType.FullName == parameters [i].ParameterType.FullName)
							return meth;	
				}
			return null;
		}
<%
		when "FieldDefinition"
%>
		public FieldDefinition GetField (string name)
		{
			foreach (FieldDefinition field in this)
				if (field.Name == name)
					return field;

			return null;
		}
<%
		when "Constructor"
%>
		public MethodDefinition GetConstructor (bool isStatic, Type [] parameters)
		{
			foreach (MethodDefinition ctor in this) {
				if (ctor.IsStatic == isStatic && ctor.Parameters.Count == parameters.Length) {
					if (parameters.Length == 0)
						return ctor;
					for (int i = 0; i < parameters.Length; i++)
						if (ctor.Parameters [i].ParameterType.FullName ==  ReflectionHelper.GetTypeSignature (parameters [i]))
							return ctor;
				}
			}

			return null;
		}

		public MethodDefinition GetConstructor (bool isStatic, ITypeReference [] parameters)
		{
			foreach (MethodDefinition ctor in this)
				if (ctor.IsStatic == isStatic && ctor.Parameters.Count == parameters.Length)
					for (int i = 0; i < parameters.Length; i++)
						if (ctor.Parameters [i].ParameterType.FullName == parameters [i].FullName)
							return ctor;

			return null;
		}
<%
		when "EventDefinition"
%>
		public EventDefinition GetEvent (string name)
		{
			foreach (EventDefinition evt in this)
				if (evt.Name == name)
					return evt;

			return null;
		}
<%
		when "PropertyDefinition"
%>
		public PropertyDefinition [] GetProperties (string name)
		{
			ArrayList ret = new ArrayList ();
			foreach (PropertyDefinition prop in this)
				if (prop.Name == name)
					ret.Add (prop);

			return ret.ToArray (typeof (PropertyDefinition)) as PropertyDefinition [];
		}
<% end 
  if !$cur_coll.visitor.nil? then %>
		public void Accept (<%=$cur_coll.visitor%> visitor)
		{
			visitor.<%=$cur_coll.visitThis%> (this);
		}
<% end %>	}
}
