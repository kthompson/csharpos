/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * <%=Time.now%>
 *
 *****************************************************************************/

namespace Mono.Cecil.Metadata {

	using System;
	using System.Collections;
	using System.IO;

	internal sealed class MetadataTableWriter : BaseMetadataTableVisitor {

		private MetadataRoot m_root;
		private TablesHeap m_heap;
		private MetadataRowWriter m_mrrw;
		private BinaryWriter m_binaryWriter;

		public MetadataTableWriter (MetadataWriter mrv, BinaryWriter writer)
		{
			m_root = mrv.GetMetadataRoot ();
			m_heap = m_root.Streams.TablesHeap;
			m_binaryWriter = writer;
			m_mrrw = new MetadataRowWriter (this);
		}

		public MetadataRoot GetMetadataRoot ()
		{
			return m_root;
		}

		public override IMetadataRowVisitor GetRowVisitor ()
		{
			return m_mrrw;
		}

		public BinaryWriter GetWriter ()
		{
			return m_binaryWriter;
		}

<% $tables.each { |table| %>		public <%=table.table_name%> Get<%=table.table_name%> ()
		{
			Type tt = typeof (<%=table.table_name%>);
			if (m_heap.HasTable (tt))
				return m_heap [tt] as <%=table.table_name%>;

			<%=table.table_name%> table = new <%=table.table_name%> ();
			table.Rows = new RowCollection ();
			m_heap.Valid |= 1L << TablesHeap.GetTableId (tt);
			m_heap.Tables.Add (table);
			return table;
		}

<% } %>		public override void Visit (TableCollection coll)
		{
			coll.Sort ();

<% $stables.each { |table|  %>			if (m_heap.HasTable (typeof (<%=table.table_name%>)))
				m_binaryWriter.Write (m_heap [typeof (<%=table.table_name%>)].Rows.Count);
<% } %>		}
	}
}
