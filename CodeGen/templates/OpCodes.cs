//
// OpCodes.cs
//
// Author:
//   Jb Evain (jbevain@gmail.com)
//
// Generated by /CodeGen/cecil-gen.rb do not edit
// <%=Time.now%>
//
// (C) 2005 Jb Evain
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

namespace Mono.Cecil.Cil {

	using System.Collections;

	public sealed class OpCodes {

		OpCodes()
		{
		}

<% $ops.each { |op| %>		public static readonly OpCode <%=op.field_name%> = new OpCode (
			"<%=op.name%>", <%=op.op1%>, <%=op.op2%>, <%=op.size%>, <%=op.flowcontrol%>,
			<%=op.opcodetype%>, <%=op.operandtype%>,
			<%=op.stackbehaviourpop%>, <%=op.stackbehaviourpush%>);
<% } %>		public sealed class Cache {

			public static readonly Cache Instance = new Cache ();

			IDictionary m_cache;
			OpCode [] m_oneByteOpCode;
			OpCode [] m_twoBytesOpCodes;

			public OpCode this [string name] {
				get { return (OpCode) m_cache [name]; }
			}

			internal IDictionary Dictionary {
				get { return m_cache; }
			}

			internal OpCode [] OneByteOpCode {
				get { return m_oneByteOpCode; }
			}

			internal OpCode [] TwoBytesOpCode {
				get { return m_twoBytesOpCodes; }
			}

			Cache ()
			{
				m_cache = new Hashtable ();
<%
	oboc = Array.new
	tboc = Array.new
	$ops.each { |op|
		if op.op1 == "0xff"
			oboc.push(op)
		else
			tboc.push(op)
		end
	}
%>				m_oneByteOpCode = new OpCode [<%=oboc[oboc.length - 1].op2%> + 1];
				m_twoBytesOpCodes = new OpCode [<%=tboc[tboc.length - 1].op2%> + 1];
<% oboc.each { |op| %>				m_oneByteOpCode [<%=op.op2%>] = OpCodes.<%=op.field_name%>;
<% }
   tboc.each { |op| %>				m_twoBytesOpCodes [<%=op.op2%>] = OpCodes.<%=op.field_name%>;
<% } %>
<% $ops.each { |op| %>				m_cache ["<%=op.name%>"] = OpCodes.<%=op.field_name%>;
<% } %>			}
		}
	}
}
