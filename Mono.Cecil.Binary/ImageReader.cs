/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Sat Jan 29 19:06:43 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

    using System;
    using System.IO;

    using Mono.Cecil.Metadata;

    internal sealed class ImageReader : IBinaryVisitor {

        private BinaryReader m_binaryReader;
        private Image m_image;
            
        public Image Image {
            get { return m_image; }
        }

        public ImageReader (string file)
        {
            m_image = Image.GetImage (file);
            m_image.Accept (this);
        }

        public BinaryReader GetReader ()
        {
            return m_binaryReader;
        }

        public void Visit (Image img)
        {
            m_binaryReader = new BinaryReader (new FileStream (
                img.FileInformation.FullName, FileMode.Open,
                FileAccess.Read, FileShare.Read));
        }

        public void Visit (DOSHeader header)
        {
            header.Start = m_binaryReader.ReadBytes (60);
            header.Lfanew = m_binaryReader.ReadUInt32 ();
            header.End = m_binaryReader.ReadBytes (64);

            m_binaryReader.BaseStream.Position = header.Lfanew;

            if ( m_binaryReader.ReadUInt16 () != 0x4550 ||
                m_binaryReader.ReadUInt16 () != 0)

                throw new ImageFormatException ("Invalid PE File Signature");
        }

        public void Visit (PEOptionalHeader header)
        {
        }

        public void Visit (PEFileHeader header)
        {
            header.Machine = m_binaryReader.ReadUInt16 ();
            header.NumberOfSections = m_binaryReader.ReadUInt16 ();
            header.TimeDateStamp = m_binaryReader.ReadUInt32 ();
            header.PointerToSymbolTable = m_binaryReader.ReadUInt32 ();
            header.NumberOfSymbols = m_binaryReader.ReadUInt32 ();
            header.OptionalHeaderSize = m_binaryReader.ReadUInt16 ();
            header.Characteristics = (Mono.Cecil.Binary.ImageCharacteristics)m_binaryReader.ReadUInt16 ();
        }

        public void Visit (PEOptionalHeader.NTSpecificFieldsHeader header)
        {
            header.ImageBase = m_binaryReader.ReadUInt32 ();
            header.SectionAlignment = m_binaryReader.ReadUInt32 ();
            header.FileAlignment = m_binaryReader.ReadUInt32 ();
            header.OSMajor = m_binaryReader.ReadUInt16 ();
            header.OSMinor = m_binaryReader.ReadUInt16 ();
            header.UserMajor = m_binaryReader.ReadUInt16 ();
            header.UserMinor = m_binaryReader.ReadUInt16 ();
            header.SubSysMajor = m_binaryReader.ReadUInt16 ();
            header.SubSysMinor = m_binaryReader.ReadUInt16 ();
            header.Reserved = m_binaryReader.ReadUInt32 ();
            header.ImageSize = m_binaryReader.ReadUInt32 ();
            header.HeaderSize = m_binaryReader.ReadUInt32 ();
            header.FileChecksum = m_binaryReader.ReadUInt32 ();
            header.SubSystem = (Mono.Cecil.Binary.SubSystem)m_binaryReader.ReadUInt16 ();
            header.DLLFlags = m_binaryReader.ReadUInt16 ();
            header.StackReserveSize = m_binaryReader.ReadUInt32 ();
            header.StackCommitSize = m_binaryReader.ReadUInt32 ();
            header.HeapReserveSize = m_binaryReader.ReadUInt32 ();
            header.HeapCommitSize = m_binaryReader.ReadUInt32 ();
            header.LoaderFlags = m_binaryReader.ReadUInt32 ();
            header.NumberOfDataDir = m_binaryReader.ReadUInt32 ();
        }

        public void Visit (PEOptionalHeader.StandardFieldsHeader header)
        {
            header.Magic = m_binaryReader.ReadUInt16 ();
            header.LMajor = m_binaryReader.ReadByte ();
            header.LMinor = m_binaryReader.ReadByte ();
            header.CodeSize = m_binaryReader.ReadUInt32 ();
            header.InitializedDataSize = m_binaryReader.ReadUInt32 ();
            header.UninitializedDataSize = m_binaryReader.ReadUInt32 ();
            header.EntryPointRVA = new RVA (m_binaryReader.ReadUInt32 ());
            header.BaseOfCode = new RVA (m_binaryReader.ReadUInt32 ());
            header.BaseOfData = new RVA (m_binaryReader.ReadUInt32 ());
        }

        public void Visit (PEOptionalHeader.DataDirectoriesHeader header)
        {
            header.ExportTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.ImportTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.ResourceTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.ExceptionTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.CertificateTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.BaseRelocationTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.Debug = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.Copyright = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.GlobalPtr = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.TLSTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.LoadConfigTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.BoundImport = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.IAT = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.DelayImportDescriptor = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.CLIHeader = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.Reserved = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
        }

        public void Visit (SectionCollection coll)
        {
            for (int i = 0; i < m_image.PEFileHeader.NumberOfSections; i++)
                coll.Add (new Section ());
        }

        public void Visit (Section sect)
        {
            char [] name, buffer = new char [8];
            int read = 0;
            while (read < 8) {
                char cur = (char) m_binaryReader.ReadSByte ();
                if (cur == '\0')
                    break;
                buffer [read++] = cur;
            }
            name = new char [read];
            Array.Copy (buffer, name, read);
            sect.Name = read == 0 ? string.Empty : new string (name);
            m_binaryReader.BaseStream.Position += 8 - read - 1;
            sect.VirtualSize = m_binaryReader.ReadUInt32 ();
            sect.VirtualAddress = new RVA (m_binaryReader.ReadUInt32 ());
            sect.SizeOfRawData = m_binaryReader.ReadUInt32 ();
            sect.PointerToRawData = new RVA (m_binaryReader.ReadUInt32 ());
            sect.PointerToRelocations = new RVA (m_binaryReader.ReadUInt32 ());
            sect.PointerToLineNumbers = new RVA (m_binaryReader.ReadUInt32 ());
            sect.NumberOfRelocations = m_binaryReader.ReadUInt16 ();
            sect.NumberOfLineNumbers = m_binaryReader.ReadUInt16 ();
            sect.Characteristics = (Mono.Cecil.Binary.SectionCharacteristics)m_binaryReader.ReadUInt32 ();

            m_image.Sections [sect.Name] = sect;
        }

        public void Visit (CLIHeader header)
        {
            if (m_image.PEOptionalHeader.DataDirectories.CLIHeader == DataDirectory.Zero)
                throw new ImageFormatException ("Non Pure CLI Image");

            m_binaryReader.BaseStream.Position = m_image.ResolveVirtualAddress (
                m_image.PEOptionalHeader.DataDirectories.CLIHeader.VirtualAddress);
            header.Cb = m_binaryReader.ReadUInt32 ();
            header.MajorRuntimeVersion = m_binaryReader.ReadUInt16 ();
            header.MinorRuntimeVersion = m_binaryReader.ReadUInt16 ();
            header.Metadata = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.Flags = (Mono.Cecil.Binary.RuntimeImage)m_binaryReader.ReadUInt32 ();
            header.EntryPointToken = m_binaryReader.ReadUInt32 ();
            header.Resources = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.StrongNameSignature = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.CodeManagerTable = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.VTableFixups = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.ExportAddressTableJumps = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());
            header.ManagedNativeHeader = new DataDirectory (
                new RVA (m_binaryReader.ReadUInt32 ()),
                m_binaryReader.ReadUInt32 ());

            if (header.StrongNameSignature != DataDirectory.Zero) {
                m_binaryReader.BaseStream.Position = m_image.ResolveVirtualAddress (
                    header.StrongNameSignature.VirtualAddress);
                header.ImageHash = m_binaryReader.ReadBytes ((int) header.StrongNameSignature.Size);
            } else {
                header.ImageHash = new byte [0];
            }
            m_binaryReader.BaseStream.Position = m_image.ResolveVirtualAddress (
                m_image.CLIHeader.Metadata.VirtualAddress);
            MetadataReader mrv = new MetadataReader (this);
            m_image.MetadataRoot.Accept (mrv);
        }

        public void Terminate (Image img)
        {
            m_binaryReader.Close();
        }
    }
}
