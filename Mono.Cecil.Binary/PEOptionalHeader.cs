/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Mon Jan 10 00:16:43 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

    internal sealed class PEOptionalHeader : IHeader, IBinaryVisitable {

        private StandardFieldsHeader m_standardFields;
        private NTSpecificFieldsHeader m_ntSpecificFields;
        private DataDirectoriesHeader m_dataDirectories;

        public StandardFieldsHeader StandardFields {
            get { return m_standardFields; }
            set { m_standardFields = value; }
        }

        public NTSpecificFieldsHeader NTSpecificFields {
            get { return m_ntSpecificFields; }
            set { m_ntSpecificFields = value; }
        }

        public DataDirectoriesHeader DataDirectories {
            get { return m_dataDirectories; }
            set { m_dataDirectories = value; }
        }

        public PEOptionalHeader() {
            m_standardFields = new StandardFieldsHeader();
            m_ntSpecificFields = new NTSpecificFieldsHeader();
            m_dataDirectories = new DataDirectoriesHeader();
        }

        public void SetDefaultValues() {}

        public void Accept(IBinaryVisitor visitor) {
            visitor.Visit(this);

            m_standardFields.Accept(visitor);
            m_ntSpecificFields.Accept(visitor);
            m_dataDirectories.Accept(visitor);
        }
        
        public sealed class StandardFieldsHeader : IHeader, IBinaryVisitable {

            private ushort m_magic;
            private byte m_lMajor;
            private byte m_lMinor;
            private uint m_codeSize;
            private uint m_initializedDataSize;
            private uint m_uninitializedDataSize;
            private RVA m_entryPointRVA;
            private RVA m_baseOfCode;
            private RVA m_baseOfData;


            public ushort Magic {
                get { return m_magic; }
                set { m_magic = value; }
            }

            public byte LMajor {
                get { return m_lMajor; }
                set { m_lMajor = value; }
            }

            public byte LMinor {
                get { return m_lMinor; }
                set { m_lMinor = value; }
            }

            public uint CodeSize {
                get { return m_codeSize; }
                set { m_codeSize = value; }
            }

            public uint InitializedDataSize {
                get { return m_initializedDataSize; }
                set { m_initializedDataSize = value; }
            }

            public uint UninitializedDataSize {
                get { return m_uninitializedDataSize; }
                set { m_uninitializedDataSize = value; }
            }

            public RVA EntryPointRVA {
                get { return m_entryPointRVA; }
                set { m_entryPointRVA = value; }
            }

            public RVA BaseOfCode {
                get { return m_baseOfCode; }
                set { m_baseOfCode = value; }
            }

            public RVA BaseOfData {
                get { return m_baseOfData; }
                set { m_baseOfData = value; }
            }

            public StandardFieldsHeader() {}

            public void SetDefaultValues() {
                m_magic = 0x10b;
                m_lMajor = 6;
                m_lMinor = 0;
            }

            public void Accept(IBinaryVisitor visitor) {
                visitor.Visit(this);
            }
        }
        
        public sealed class NTSpecificFieldsHeader : IHeader, IBinaryVisitable {

            private uint m_imageBase;
            private uint m_sectionAlignment;
            private uint m_fileAlignment;
            private ushort m_oSMajor;
            private ushort m_oSMinor;
            private ushort m_userMajor;
            private ushort m_userMinor;
            private ushort m_subSysMajor;
            private ushort m_subSysMinor;
            private uint m_reserved;
            private uint m_imageSize;
            private uint m_headerSize;
            private uint m_fileChecksum;
            private SubSystem m_subSystem;
            private ushort m_dLLFlags;
            private uint m_stackReserveSize;
            private uint m_stackCommitSize;
            private uint m_heapReserveSize;
            private uint m_heapCommitSize;
            private uint m_loaderFlags;
            private uint m_numberOfDataDir;


            public uint ImageBase {
                get { return m_imageBase; }
                set { m_imageBase = value; }
            }

            public uint SectionAlignment {
                get { return m_sectionAlignment; }
                set { m_sectionAlignment = value; }
            }

            public uint FileAlignment {
                get { return m_fileAlignment; }
                set { m_fileAlignment = value; }
            }

            public ushort OSMajor {
                get { return m_oSMajor; }
                set { m_oSMajor = value; }
            }

            public ushort OSMinor {
                get { return m_oSMinor; }
                set { m_oSMinor = value; }
            }

            public ushort UserMajor {
                get { return m_userMajor; }
                set { m_userMajor = value; }
            }

            public ushort UserMinor {
                get { return m_userMinor; }
                set { m_userMinor = value; }
            }

            public ushort SubSysMajor {
                get { return m_subSysMajor; }
                set { m_subSysMajor = value; }
            }

            public ushort SubSysMinor {
                get { return m_subSysMinor; }
                set { m_subSysMinor = value; }
            }

            public uint Reserved {
                get { return m_reserved; }
                set { m_reserved = value; }
            }

            public uint ImageSize {
                get { return m_imageSize; }
                set { m_imageSize = value; }
            }

            public uint HeaderSize {
                get { return m_headerSize; }
                set { m_headerSize = value; }
            }

            public uint FileChecksum {
                get { return m_fileChecksum; }
                set { m_fileChecksum = value; }
            }

            public SubSystem SubSystem {
                get { return m_subSystem; }
                set { m_subSystem = value; }
            }

            public ushort DLLFlags {
                get { return m_dLLFlags; }
                set { m_dLLFlags = value; }
            }

            public uint StackReserveSize {
                get { return m_stackReserveSize; }
                set { m_stackReserveSize = value; }
            }

            public uint StackCommitSize {
                get { return m_stackCommitSize; }
                set { m_stackCommitSize = value; }
            }

            public uint HeapReserveSize {
                get { return m_heapReserveSize; }
                set { m_heapReserveSize = value; }
            }

            public uint HeapCommitSize {
                get { return m_heapCommitSize; }
                set { m_heapCommitSize = value; }
            }

            public uint LoaderFlags {
                get { return m_loaderFlags; }
                set { m_loaderFlags = value; }
            }

            public uint NumberOfDataDir {
                get { return m_numberOfDataDir; }
                set { m_numberOfDataDir = value; }
            }

            public NTSpecificFieldsHeader() {}

            public void SetDefaultValues() {
                m_imageBase = 0x400000;
                m_sectionAlignment = 0x2000;
                m_oSMajor = 4;
                m_oSMinor = 0;
                m_userMajor = 0;
                m_userMinor = 0;
                m_subSysMajor = 4;
                m_subSysMinor = 0;
                m_reserved = 0;
                m_fileChecksum = 0;
                m_dLLFlags = 0;
                m_stackReserveSize = 0x100000;
                m_stackCommitSize = 0x1000;
                m_heapReserveSize = 0x100000;
                m_heapCommitSize = 0x1000;
                m_loaderFlags = 0;
                m_numberOfDataDir = 0x10;
            }

            public void Accept(IBinaryVisitor visitor) {
                visitor.Visit(this);
            }
        }
        
        public sealed class DataDirectoriesHeader : IHeader, IBinaryVisitable {

            private DataDirectory m_exportTable;
            private DataDirectory m_importTable;
            private DataDirectory m_resourceTable;
            private DataDirectory m_exceptionTable;
            private DataDirectory m_certificateTable;
            private DataDirectory m_baseRelocationTable;
            private DataDirectory m_debug;
            private DataDirectory m_copyright;
            private DataDirectory m_globalPtr;
            private DataDirectory m_tLSTable;
            private DataDirectory m_loadConfigTable;
            private DataDirectory m_boundImport;
            private DataDirectory m_iAT;
            private DataDirectory m_delayImportDescriptor;
            private DataDirectory m_cLIHeader;
            private DataDirectory m_reserved;


            public DataDirectory ExportTable {
                get { return m_exportTable; }
                set { m_exportTable = value; }
            }

            public DataDirectory ImportTable {
                get { return m_importTable; }
                set { m_importTable = value; }
            }

            public DataDirectory ResourceTable {
                get { return m_resourceTable; }
                set { m_resourceTable = value; }
            }

            public DataDirectory ExceptionTable {
                get { return m_exceptionTable; }
                set { m_exceptionTable = value; }
            }

            public DataDirectory CertificateTable {
                get { return m_certificateTable; }
                set { m_certificateTable = value; }
            }

            public DataDirectory BaseRelocationTable {
                get { return m_baseRelocationTable; }
                set { m_baseRelocationTable = value; }
            }

            public DataDirectory Debug {
                get { return m_debug; }
                set { m_debug = value; }
            }

            public DataDirectory Copyright {
                get { return m_copyright; }
                set { m_copyright = value; }
            }

            public DataDirectory GlobalPtr {
                get { return m_globalPtr; }
                set { m_globalPtr = value; }
            }

            public DataDirectory TLSTable {
                get { return m_tLSTable; }
                set { m_tLSTable = value; }
            }

            public DataDirectory LoadConfigTable {
                get { return m_loadConfigTable; }
                set { m_loadConfigTable = value; }
            }

            public DataDirectory BoundImport {
                get { return m_boundImport; }
                set { m_boundImport = value; }
            }

            public DataDirectory IAT {
                get { return m_iAT; }
                set { m_iAT = value; }
            }

            public DataDirectory DelayImportDescriptor {
                get { return m_delayImportDescriptor; }
                set { m_delayImportDescriptor = value; }
            }

            public DataDirectory CLIHeader {
                get { return m_cLIHeader; }
                set { m_cLIHeader = value; }
            }

            public DataDirectory Reserved {
                get { return m_reserved; }
                set { m_reserved = value; }
            }

            public DataDirectoriesHeader() {}

            public void SetDefaultValues() {
                m_exportTable = DataDirectory.Zero;
                m_importTable = DataDirectory.Zero;
                m_resourceTable = DataDirectory.Zero;
                m_exceptionTable = DataDirectory.Zero;
                m_certificateTable = DataDirectory.Zero;
                m_debug = DataDirectory.Zero;
                m_copyright = DataDirectory.Zero;
                m_globalPtr = DataDirectory.Zero;
                m_tLSTable = DataDirectory.Zero;
                m_loadConfigTable = DataDirectory.Zero;
                m_boundImport = DataDirectory.Zero;
                m_delayImportDescriptor = DataDirectory.Zero;
                m_reserved = DataDirectory.Zero;
            }

            public void Accept(IBinaryVisitor visitor) {
                visitor.Visit(this);
            }
        }
    }
}
