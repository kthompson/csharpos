/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Thu Feb 24 05:46:15 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

    internal sealed class PEOptionalHeader : IHeader, IBinaryVisitable {

        public StandardFieldsHeader StandardFields;
        public NTSpecificFieldsHeader NTSpecificFields;
        public DataDirectoriesHeader DataDirectories;

        public PEOptionalHeader ()
        {
            StandardFields = new StandardFieldsHeader ();
            NTSpecificFields = new NTSpecificFieldsHeader ();
            DataDirectories = new DataDirectoriesHeader ();
        }

        public void SetDefaultValues ()
        {
        }

        public void Accept (IBinaryVisitor visitor)
        {
            visitor.Visit (this);

            StandardFields.Accept (visitor);
            NTSpecificFields.Accept (visitor);
            DataDirectories.Accept (visitor);
        }
        
        public sealed class StandardFieldsHeader : IHeader, IBinaryVisitable {

            public ushort Magic;
            public byte LMajor;
            public byte LMinor;
            public uint CodeSize;
            public uint InitializedDataSize;
            public uint UninitializedDataSize;
            public RVA EntryPointRVA;
            public RVA BaseOfCode;
            public RVA BaseOfData;

            public StandardFieldsHeader ()
            {
            }

            public void SetDefaultValues ()
            {
                Magic = 0x10b;
                LMajor = 6;
                LMinor = 0;
            }

            public void Accept (IBinaryVisitor visitor)
            {
                visitor.Visit (this);
            }
        }
        
        public sealed class NTSpecificFieldsHeader : IHeader, IBinaryVisitable {

            public uint ImageBase;
            public uint SectionAlignment;
            public uint FileAlignment;
            public ushort OSMajor;
            public ushort OSMinor;
            public ushort UserMajor;
            public ushort UserMinor;
            public ushort SubSysMajor;
            public ushort SubSysMinor;
            public uint Reserved;
            public uint ImageSize;
            public uint HeaderSize;
            public uint FileChecksum;
            public SubSystem SubSystem;
            public ushort DLLFlags;
            public uint StackReserveSize;
            public uint StackCommitSize;
            public uint HeapReserveSize;
            public uint HeapCommitSize;
            public uint LoaderFlags;
            public uint NumberOfDataDir;

            public NTSpecificFieldsHeader ()
            {
            }

            public void SetDefaultValues ()
            {
                ImageBase = 0x400000;
                SectionAlignment = 0x2000;
                OSMajor = 4;
                OSMinor = 0;
                UserMajor = 0;
                UserMinor = 0;
                SubSysMajor = 4;
                SubSysMinor = 0;
                Reserved = 0;
                FileChecksum = 0;
                DLLFlags = 0;
                StackReserveSize = 0x100000;
                StackCommitSize = 0x1000;
                HeapReserveSize = 0x100000;
                HeapCommitSize = 0x1000;
                LoaderFlags = 0;
                NumberOfDataDir = 0x10;
            }

            public void Accept (IBinaryVisitor visitor)
            {
                visitor.Visit (this);
            }
        }
        
        public sealed class DataDirectoriesHeader : IHeader, IBinaryVisitable {

            public DataDirectory ExportTable;
            public DataDirectory ImportTable;
            public DataDirectory ResourceTable;
            public DataDirectory ExceptionTable;
            public DataDirectory CertificateTable;
            public DataDirectory BaseRelocationTable;
            public DataDirectory Debug;
            public DataDirectory Copyright;
            public DataDirectory GlobalPtr;
            public DataDirectory TLSTable;
            public DataDirectory LoadConfigTable;
            public DataDirectory BoundImport;
            public DataDirectory IAT;
            public DataDirectory DelayImportDescriptor;
            public DataDirectory CLIHeader;
            public DataDirectory Reserved;

            public DataDirectoriesHeader ()
            {
            }

            public void SetDefaultValues ()
            {
                ExportTable = DataDirectory.Zero;
                ImportTable = DataDirectory.Zero;
                ResourceTable = DataDirectory.Zero;
                ExceptionTable = DataDirectory.Zero;
                CertificateTable = DataDirectory.Zero;
                Debug = DataDirectory.Zero;
                Copyright = DataDirectory.Zero;
                GlobalPtr = DataDirectory.Zero;
                TLSTable = DataDirectory.Zero;
                LoadConfigTable = DataDirectory.Zero;
                BoundImport = DataDirectory.Zero;
                DelayImportDescriptor = DataDirectory.Zero;
                Reserved = DataDirectory.Zero;
            }

            public void Accept (IBinaryVisitor visitor)
            {
                visitor.Visit (this);
            }
        }
    }
}
