/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Mon Jan 10 00:16:43 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Binary {

    internal sealed class Section : IHeader, IBinaryVisitable {

        private uint m_virtualSize;
        private RVA m_virtualAddress;
        private uint m_sizeOfRawData;
        private RVA m_pointerToRawData;
        private RVA m_pointerToRelocations;
        private RVA m_pointerToLineNumbers;
        private ushort m_numberOfRelocations;
        private ushort m_numberOfLineNumbers;
        private SectionCharacteristics m_characteristics;

        private string m_name;

        public string Name {
            get { return m_name; }
            set { m_name = value; }
        }

        public uint VirtualSize {
            get { return m_virtualSize; }
            set { m_virtualSize = value; }
        }

        public RVA VirtualAddress {
            get { return m_virtualAddress; }
            set { m_virtualAddress = value; }
        }

        public uint SizeOfRawData {
            get { return m_sizeOfRawData; }
            set { m_sizeOfRawData = value; }
        }

        public RVA PointerToRawData {
            get { return m_pointerToRawData; }
            set { m_pointerToRawData = value; }
        }

        public RVA PointerToRelocations {
            get { return m_pointerToRelocations; }
            set { m_pointerToRelocations = value; }
        }

        public RVA PointerToLineNumbers {
            get { return m_pointerToLineNumbers; }
            set { m_pointerToLineNumbers = value; }
        }

        public ushort NumberOfRelocations {
            get { return m_numberOfRelocations; }
            set { m_numberOfRelocations = value; }
        }

        public ushort NumberOfLineNumbers {
            get { return m_numberOfLineNumbers; }
            set { m_numberOfLineNumbers = value; }
        }

        public SectionCharacteristics Characteristics {
            get { return m_characteristics; }
            set { m_characteristics = value; }
        }

        public Section() {}

        public void SetDefaultValues() {
            m_pointerToLineNumbers = RVA.Zero;
            m_numberOfLineNumbers = 0;
        }

        public void Accept(IBinaryVisitor visitor) {
            visitor.Visit(this);
        }
    }
}
