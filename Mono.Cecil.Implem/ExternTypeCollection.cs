/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Fri Aug 19 21:08:17 CEST 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Implem {

	using System;
	using System.Collections;
	using System.Collections.Specialized;

	using Mono.Cecil;
	using Mono.Cecil.Cil;

	internal class ExternTypeCollection : NameObjectCollectionBase, IExternTypeCollection, ILazyLoadableCollection {

		private ModuleDefinition m_container;
		private ReflectionController m_controller;

		private bool m_loaded;

		public ITypeReference this [int index] {
			get { return this.BaseGet (index) as ITypeReference; }
			set { this.BaseSet (index, value); }
		}

		public ITypeReference this [string fullName] {
			get { return this.BaseGet (fullName) as ITypeReference; }
			set { this.BaseSet (fullName, value); }
		}

		public IModuleDefinition Container {
			get { return m_container; }
		}

		public bool Loaded {
			get { return m_loaded; }
			set { m_loaded = value; }
		}

		public ExternTypeCollection (ModuleDefinition container)
		{
			m_container = container;
		}

		public ExternTypeCollection (ModuleDefinition container, ReflectionController controller) : this (container)
		{
			m_controller = controller;
		}

		public void Add (ITypeReference value)
		{
			if (value == null)
				throw new ArgumentNullException ("value");

			this.BaseSet (value.FullName, value);
		}

		public void Clear ()
		{
			this.BaseClear ();
		}

		public bool Contains (ITypeReference value)
		{
			return Contains (value.FullName);
		}

		public bool Contains (string fullName)
		{
			return this.BaseGet (fullName) != null;
		}

		public int IndexOf (ITypeReference value)
		{
			return Array.IndexOf (this.BaseGetAllKeys (), value.FullName);
		}

		public void Remove (ITypeReference value)
		{
			this.BaseRemove (value.FullName);
		}

		public void RemoveAt (int index)
		{
			this.BaseRemoveAt (index);
		}

		public void CopyTo (Array ary, int index)
		{
			(this as ICollection).CopyTo (ary, index);
		}

		public new IEnumerator GetEnumerator ()
		{
			return this.BaseGetAllValues ().GetEnumerator ();
		}

		public void Load ()
		{
			if (m_controller != null && !m_loaded) {
				m_controller.Reader.VisitExternTypeCollection (this);
				m_loaded = true;
			}
		}

		public void Accept (IReflectionVisitor visitor)
		{
			visitor.VisitExternTypeCollection (this);
		}
	}
}
