/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Tue Jul 05 15:48:32 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Implem {

	using System;
	using System.Collections;

	using Mono.Cecil;
	using Mono.Cecil.Cil;

	internal class MethodDefinitionCollection : IMethodDefinitionCollection, ILazyLoadableCollection {

		private IList m_items;
		private TypeDefinition m_container;
		private ReflectionController m_controller;

		private bool m_loaded;

		public IMethodDefinition this [int index] {
			get {
				Load ();
				return m_items [index] as IMethodDefinition;
			}
			set { m_items [index] = value; }
		}

		public ITypeDefinition Container {
			get { return m_container; }
		}

		public int Count {
			get {
				Load ();
				return m_items.Count;
			}
		}

		public bool IsSynchronized {
			get { return false; }
		}

		public object SyncRoot {
			get { return this; }
		}

		public bool Loaded {
			get { return m_loaded; }
			set { m_loaded = value; }
		}

		public MethodDefinitionCollection (TypeDefinition container)
		{
			m_container = container;
			m_items = new ArrayList ();
		}		

		public MethodDefinitionCollection (TypeDefinition container, ReflectionController controller) : this (container)
		{
			m_controller = controller;
		}
		
		public void Add (IMethodDefinition value)
		{
			m_items.Add (value);
		}

		public void Clear ()
		{
			m_items.Clear ();
		}

		public bool Contains (IMethodDefinition value)
		{
			return m_items.Contains (value);
		}
		
		public int IndexOf (IMethodDefinition value)
		{
			Load ();
			return m_items.IndexOf (value);
		}

		public void Insert (int index, IMethodDefinition value)
		{
			m_items.Insert (index, value);
		}

		public void Remove (IMethodDefinition value)
		{
			m_items.Remove (value);
		}

		public void RemoveAt (int index)
		{
			m_items.Remove (index);
		}

		public void CopyTo (Array ary, int index)
		{
			Load ();
			m_items.CopyTo (ary, index);
		}

		public IEnumerator GetEnumerator ()
		{
			Load ();
			return m_items.GetEnumerator ();
		}
		
		public void Load ()
		{
			if (m_controller != null && !m_loaded) {
				m_controller.Reader.Visit (this);
				m_loaded = true;
			}
		}

		public void Accept (IReflectionVisitor visitor)
		{
			visitor.Visit (this);
			IMethodDefinition [] items = new IMethodDefinition [m_items.Count];
			m_items.CopyTo (items, 0);
			for (int i = 0; i < items.Length; i++)
				items [i].Accept (visitor);
		}
	}
}
