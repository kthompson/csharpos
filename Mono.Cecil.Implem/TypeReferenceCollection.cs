/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Thu Aug 25 19:01:28 CEST 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Implem {

	using System;
	using System.Collections;
	using System.Collections.Specialized;

	using Mono.Cecil;
	using Mono.Cecil.Cil;

	internal class TypeReferenceCollection : NameObjectCollectionBase, ITypeReferenceCollection {

		private IModuleDefinition m_container;

		public event TypeReferenceEventHandler OnTypeReferenceAdded;
		public event TypeReferenceEventHandler OnTypeReferenceRemoved;
	
		public ITypeReference this [int index] {
			get { return this.BaseGet (index) as ITypeReference; }
			set { this.BaseSet (index, value); }
		}

		public ITypeReference this [string fullName] {
			get { return this.BaseGet (fullName) as ITypeReference; }
			set { this.BaseSet (fullName, value); }
		}

		public IModuleDefinition Container {
			get { return m_container; }
		}

		public bool IsSynchronized {
			get { return (this as ICollection).IsSynchronized; }
		}

		public object SyncRoot {
			get { return (this as ICollection).SyncRoot; }
		}

		public TypeReferenceCollection (IModuleDefinition container)
		{
			m_container = container;
		}

		public void Add (ITypeReference value)
		{
			if (value == null)
				throw new ArgumentNullException ("value");

			if (OnTypeReferenceAdded != null && !this.Contains (value))
				OnTypeReferenceAdded (this, new TypeReferenceEventArgs (value));

			this.BaseSet (value.FullName, value);
		}

		public void Clear ()
		{
			if (OnTypeReferenceRemoved != null)
				foreach (ITypeReference item in this)
					OnTypeReferenceRemoved (this, new TypeReferenceEventArgs (item));
			this.BaseClear ();
		}

		public bool Contains (ITypeReference value)
		{
			return Contains (value.FullName);
		}

		public bool Contains (string fullName)
		{
			return this.BaseGet (fullName) != null;
		}

		public int IndexOf (ITypeReference value)
		{
			return Array.IndexOf (this.BaseGetAllKeys (), value.FullName);
		}

		public void Remove (ITypeReference value)
		{
			if (OnTypeReferenceRemoved != null && this.Contains (value))
				OnTypeReferenceRemoved (this, new TypeReferenceEventArgs (value));
			this.BaseRemove (value.FullName);
		}

		public void RemoveAt (int index)
		{
			if (OnTypeReferenceRemoved != null)
				OnTypeReferenceRemoved (this, new TypeReferenceEventArgs (this [index]));
			this.BaseRemoveAt (index);
		}

		public void CopyTo (Array ary, int index)
		{
			(this as ICollection).CopyTo (ary, index);
		}

		public new IEnumerator GetEnumerator ()
		{
			return this.BaseGetAllValues ().GetEnumerator ();
		}

		public void Accept (IReflectionVisitor visitor)
		{
			visitor.VisitTypeReferenceCollection (this);
		}
	}
}
