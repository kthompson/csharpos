/*
 * Copyright (c) 2004, 2005 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jbevain@gmail.com)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Thu Aug 25 19:01:29 CEST 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Implem {

	using System;
	using System.Collections;

	using Mono.Cecil;
	using Mono.Cecil.Cil;

	internal class VariableDefinitionCollection : IVariableDefinitionCollection {

		private IList m_items;
		private MethodBody m_container;

		public event VariableDefinitionEventHandler OnVariableDefinitionAdded;
		public event VariableDefinitionEventHandler OnVariableDefinitionRemoved;

		public IVariableDefinition this [int index] {
			get { return m_items [index] as IVariableDefinition; }
			set { m_items [index] = value; }
		}

		public IMethodBody Container {
			get { return m_container; }
		}

		public int Count {
			get { return m_items.Count; }
		}

		public bool IsSynchronized {
			get { return false; }
		}

		public object SyncRoot {
			get { return this; }
		}

		public VariableDefinitionCollection (MethodBody container)
		{
			m_container = container;
			m_items = new ArrayList ();
		}

		public void Add (IVariableDefinition value)
		{
			if (OnVariableDefinitionAdded != null && !this.Contains (value))
				OnVariableDefinitionAdded (this, new VariableDefinitionEventArgs (value));
			m_items.Add (value);
		}

		public void Clear ()
		{
			if (OnVariableDefinitionRemoved != null)
				foreach (IVariableDefinition item in this)
					OnVariableDefinitionRemoved (this, new VariableDefinitionEventArgs (item));
			m_items.Clear ();
		}

		public bool Contains (IVariableDefinition value)
		{
			return m_items.Contains (value);
		}

		public int IndexOf (IVariableDefinition value)
		{
			return m_items.IndexOf (value);
		}

		public void Insert (int index, IVariableDefinition value)
		{
			if (OnVariableDefinitionAdded != null && !this.Contains (value))
				OnVariableDefinitionAdded (this, new VariableDefinitionEventArgs (value));
			m_items.Insert (index, value);
		}

		public void Remove (IVariableDefinition value)
		{
			if (OnVariableDefinitionRemoved != null && this.Contains (value))
				OnVariableDefinitionRemoved (this, new VariableDefinitionEventArgs (value));
			m_items.Remove (value);
		}

		public void RemoveAt (int index)
		{
			if (OnVariableDefinitionRemoved != null)
				OnVariableDefinitionRemoved (this, new VariableDefinitionEventArgs (this [index]));
			m_items.Remove (index);
		}

		public void CopyTo (Array ary, int index)
		{
			m_items.CopyTo (ary, index);
		}

		public IEnumerator GetEnumerator ()
		{
			return m_items.GetEnumerator ();
		}

		public void Accept (ICodeVisitor visitor)
		{
			visitor.VisitVariableDefinitionCollection (this);
		}
	}
}
