/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Mon Jan 24 14:17:03 Paris, Madrid 2005
 *
 *****************************************************************************/

#if NET_2_0

namespace Mono.Cecil.Metadata {

    using Mono.Cecil;

    [RId (0x2a)]
    internal sealed class GenericParamTable : IMetadataTable {

        private RowCollection m_rows;

        public GenericParamRow this [int index] {
            get { return m_rows [index] as GenericParamRow; }
            set { m_rows [index] = value; }
        }

        public RowCollection Rows {
            get { return m_rows; }
            set { m_rows = value; }
        }

        public void Accept (IMetadataTableVisitor visitor)
        {
            visitor.Visit (this);
            this.Rows.Accept (visitor.GetRowVisitor ());
        }
    }

    internal sealed class GenericParamRow : IMetadataRow {

        public static readonly int RowSize = 12;
        public static readonly int RowColumns = 4;

        [Column] private ushort m_number;
        [Column] private GenericParamAttributes m_flags;
        [Column] private MetadataToken m_owner;
        [Column] private uint m_name;

        public ushort Number {
            get { return m_number; }
            set { m_number = value; }
        }

        public GenericParamAttributes Flags {
            get { return m_flags; }
            set { m_flags = value; }
        }

        public MetadataToken Owner {
            get { return m_owner; }
            set { m_owner = value; }
        }

        public uint Name {
            get { return m_name; }
            set { m_name = value; }
        }

        public int Size {
            get { return GenericParamRow.RowSize; }
        }

        public int Columns {
            get { return GenericParamRow.RowColumns; }
        }

        public void Accept (IMetadataRowVisitor visitor)
        {
            visitor.Visit (this);
        }
    }
}

#endif
