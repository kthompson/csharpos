/*
 * Copyright (c) 2004 DotNetGuru and the individuals listed
 * on the ChangeLog entries.
 *
 * Authors :
 *   Jb Evain   (jb.evain@dotnetguru.org)
 *
 * This is a free software distributed under a MIT/X11 license
 * See LICENSE.MIT file for more details
 *
 * Generated by /CodeGen/cecil-gen.rb do not edit
 * Tue Jan 25 10:23:44 Paris, Madrid 2005
 *
 *****************************************************************************/

namespace Mono.Cecil.Metadata {

    using System;
    using System.Collections;
    using System.IO;

    internal sealed class MetadataTableReader : IMetadataTableVisitor {

        private MetadataRoot m_metadataRoot;
        private TablesHeap m_heap;
        private MetadataRowReader m_mrrv;
        private BinaryReader m_binaryReader;

        public readonly IDictionary Rows = new Hashtable (37);

        public MetadataTableReader (MetadataReader mrv)
        {
            m_metadataRoot = mrv.GetMetadataRoot ();
            m_heap = m_metadataRoot.Streams.TablesHeap;
            m_binaryReader = new BinaryReader (new MemoryStream (m_heap.Data));
            m_binaryReader.BaseStream.Position = 24;
            m_mrrv = new MetadataRowReader (this);
        }

        public MetadataRoot GetMetadataRoot ()
        {
            return m_metadataRoot;
        }

        public BinaryReader GetReader ()
        {
            return m_binaryReader;
        }

        public IMetadataRowVisitor GetRowVisitor ()
        {
            return m_mrrv;
        }

        private void ReadNumberOfRows (Type table)
        {
            this.Rows [table] = m_binaryReader.ReadInt32 ();
        }

        public int GetNumberOfRows (Type table)
        {
            object n = this.Rows [table];
            if (n != null)
                return (int) n;
            return 0;
        }

        public void Visit (TableCollection coll)
        {
            if (m_heap.HasTable (typeof (ModuleTable))) {
                coll.Add (new ModuleTable ());
                ReadNumberOfRows (typeof (ModuleTable));
            }
            if (m_heap.HasTable (typeof (TypeRefTable))) {
                coll.Add (new TypeRefTable ());
                ReadNumberOfRows (typeof (TypeRefTable));
            }
            if (m_heap.HasTable (typeof (TypeDefTable))) {
                coll.Add (new TypeDefTable ());
                ReadNumberOfRows (typeof (TypeDefTable));
            }
            if (m_heap.HasTable (typeof (FieldTable))) {
                coll.Add (new FieldTable ());
                ReadNumberOfRows (typeof (FieldTable));
            }
            if (m_heap.HasTable (typeof (MethodTable))) {
                coll.Add (new MethodTable ());
                ReadNumberOfRows (typeof (MethodTable));
            }
            if (m_heap.HasTable (typeof (ParamTable))) {
                coll.Add (new ParamTable ());
                ReadNumberOfRows (typeof (ParamTable));
            }
            if (m_heap.HasTable (typeof (InterfaceImplTable))) {
                coll.Add (new InterfaceImplTable ());
                ReadNumberOfRows (typeof (InterfaceImplTable));
            }
            if (m_heap.HasTable (typeof (MemberRefTable))) {
                coll.Add (new MemberRefTable ());
                ReadNumberOfRows (typeof (MemberRefTable));
            }
            if (m_heap.HasTable (typeof (ConstantTable))) {
                coll.Add (new ConstantTable ());
                ReadNumberOfRows (typeof (ConstantTable));
            }
            if (m_heap.HasTable (typeof (CustomAttributeTable))) {
                coll.Add (new CustomAttributeTable ());
                ReadNumberOfRows (typeof (CustomAttributeTable));
            }
            if (m_heap.HasTable (typeof (FieldMarshalTable))) {
                coll.Add (new FieldMarshalTable ());
                ReadNumberOfRows (typeof (FieldMarshalTable));
            }
            if (m_heap.HasTable (typeof (DeclSecurityTable))) {
                coll.Add (new DeclSecurityTable ());
                ReadNumberOfRows (typeof (DeclSecurityTable));
            }
            if (m_heap.HasTable (typeof (ClassLayoutTable))) {
                coll.Add (new ClassLayoutTable ());
                ReadNumberOfRows (typeof (ClassLayoutTable));
            }
            if (m_heap.HasTable (typeof (FieldLayoutTable))) {
                coll.Add (new FieldLayoutTable ());
                ReadNumberOfRows (typeof (FieldLayoutTable));
            }
            if (m_heap.HasTable (typeof (StandAloneSigTable))) {
                coll.Add (new StandAloneSigTable ());
                ReadNumberOfRows (typeof (StandAloneSigTable));
            }
            if (m_heap.HasTable (typeof (EventMapTable))) {
                coll.Add (new EventMapTable ());
                ReadNumberOfRows (typeof (EventMapTable));
            }
            if (m_heap.HasTable (typeof (EventTable))) {
                coll.Add (new EventTable ());
                ReadNumberOfRows (typeof (EventTable));
            }
            if (m_heap.HasTable (typeof (PropertyMapTable))) {
                coll.Add (new PropertyMapTable ());
                ReadNumberOfRows (typeof (PropertyMapTable));
            }
            if (m_heap.HasTable (typeof (PropertyTable))) {
                coll.Add (new PropertyTable ());
                ReadNumberOfRows (typeof (PropertyTable));
            }
            if (m_heap.HasTable (typeof (MethodSemanticsTable))) {
                coll.Add (new MethodSemanticsTable ());
                ReadNumberOfRows (typeof (MethodSemanticsTable));
            }
            if (m_heap.HasTable (typeof (MethodImplTable))) {
                coll.Add (new MethodImplTable ());
                ReadNumberOfRows (typeof (MethodImplTable));
            }
            if (m_heap.HasTable (typeof (ModuleRefTable))) {
                coll.Add (new ModuleRefTable ());
                ReadNumberOfRows (typeof (ModuleRefTable));
            }
            if (m_heap.HasTable (typeof (TypeSpecTable))) {
                coll.Add (new TypeSpecTable ());
                ReadNumberOfRows (typeof (TypeSpecTable));
            }
            if (m_heap.HasTable (typeof (ImplMapTable))) {
                coll.Add (new ImplMapTable ());
                ReadNumberOfRows (typeof (ImplMapTable));
            }
            if (m_heap.HasTable (typeof (FieldRVATable))) {
                coll.Add (new FieldRVATable ());
                ReadNumberOfRows (typeof (FieldRVATable));
            }
            if (m_heap.HasTable (typeof (AssemblyTable))) {
                coll.Add (new AssemblyTable ());
                ReadNumberOfRows (typeof (AssemblyTable));
            }
            if (m_heap.HasTable (typeof (AssemblyProcessorTable))) {
                coll.Add (new AssemblyProcessorTable ());
                ReadNumberOfRows (typeof (AssemblyProcessorTable));
            }
            if (m_heap.HasTable (typeof (AssemblyOSTable))) {
                coll.Add (new AssemblyOSTable ());
                ReadNumberOfRows (typeof (AssemblyOSTable));
            }
            if (m_heap.HasTable (typeof (AssemblyRefTable))) {
                coll.Add (new AssemblyRefTable ());
                ReadNumberOfRows (typeof (AssemblyRefTable));
            }
            if (m_heap.HasTable (typeof (AssemblyRefProcessorTable))) {
                coll.Add (new AssemblyRefProcessorTable ());
                ReadNumberOfRows (typeof (AssemblyRefProcessorTable));
            }
            if (m_heap.HasTable (typeof (AssemblyRefOSTable))) {
                coll.Add (new AssemblyRefOSTable ());
                ReadNumberOfRows (typeof (AssemblyRefOSTable));
            }
            if (m_heap.HasTable (typeof (FileTable))) {
                coll.Add (new FileTable ());
                ReadNumberOfRows (typeof (FileTable));
            }
            if (m_heap.HasTable (typeof (ExportedTypeTable))) {
                coll.Add (new ExportedTypeTable ());
                ReadNumberOfRows (typeof (ExportedTypeTable));
            }
            if (m_heap.HasTable (typeof (ManifestResourceTable))) {
                coll.Add (new ManifestResourceTable ());
                ReadNumberOfRows (typeof (ManifestResourceTable));
            }
            if (m_heap.HasTable (typeof (NestedClassTable))) {
                coll.Add (new NestedClassTable ());
                ReadNumberOfRows (typeof (NestedClassTable));
            }
            if (m_heap.HasTable (typeof (GenericParamTable))) {
                coll.Add (new GenericParamTable ());
                ReadNumberOfRows (typeof (GenericParamTable));
            }
            if (m_heap.HasTable (typeof (GenericParamConstraintTable))) {
                coll.Add (new GenericParamConstraintTable ());
                ReadNumberOfRows (typeof (GenericParamConstraintTable));
            }
        }

        public void Visit (AssemblyTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyRow ());
        }

        public void Visit (AssemblyOSTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyOSTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyOSRow ());
        }

        public void Visit (AssemblyProcessorTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyProcessorTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyProcessorRow ());
        }

        public void Visit (AssemblyRefTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyRefTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyRefRow ());
        }

        public void Visit (AssemblyRefOSTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyRefOSTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyRefOSRow ());
        }

        public void Visit (AssemblyRefProcessorTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (AssemblyRefProcessorTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new AssemblyRefProcessorRow ());
        }

        public void Visit (ClassLayoutTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ClassLayoutTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ClassLayoutRow ());
        }

        public void Visit (ConstantTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ConstantTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ConstantRow ());
        }

        public void Visit (CustomAttributeTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (CustomAttributeTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new CustomAttributeRow ());
        }

        public void Visit (DeclSecurityTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (DeclSecurityTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new DeclSecurityRow ());
        }

        public void Visit (EventMapTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (EventMapTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new EventMapRow ());
        }

        public void Visit (EventTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (EventTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new EventRow ());
        }

        public void Visit (ExportedTypeTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ExportedTypeTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ExportedTypeRow ());
        }

        public void Visit (FieldTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (FieldTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new FieldRow ());
        }

        public void Visit (FieldLayoutTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (FieldLayoutTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new FieldLayoutRow ());
        }

        public void Visit (FieldMarshalTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (FieldMarshalTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new FieldMarshalRow ());
        }

        public void Visit (FieldRVATable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (FieldRVATable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new FieldRVARow ());
        }

        public void Visit (FileTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (FileTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new FileRow ());
        }

        public void Visit (GenericParamTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (GenericParamTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new GenericParamRow ());
        }

        public void Visit (GenericParamConstraintTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (GenericParamConstraintTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new GenericParamConstraintRow ());
        }

        public void Visit (ImplMapTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ImplMapTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ImplMapRow ());
        }

        public void Visit (InterfaceImplTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (InterfaceImplTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new InterfaceImplRow ());
        }

        public void Visit (ManifestResourceTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ManifestResourceTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ManifestResourceRow ());
        }

        public void Visit (MemberRefTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (MemberRefTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new MemberRefRow ());
        }

        public void Visit (MethodTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (MethodTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new MethodRow ());
        }

        public void Visit (MethodImplTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (MethodImplTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new MethodImplRow ());
        }

        public void Visit (MethodSemanticsTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (MethodSemanticsTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new MethodSemanticsRow ());
        }

        public void Visit (ModuleTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ModuleTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ModuleRow ());
        }

        public void Visit (ModuleRefTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ModuleRefTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ModuleRefRow ());
        }

        public void Visit (NestedClassTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (NestedClassTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new NestedClassRow ());
        }

        public void Visit (ParamTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (ParamTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new ParamRow ());
        }

        public void Visit (PropertyTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (PropertyTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new PropertyRow ());
        }

        public void Visit (PropertyMapTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (PropertyMapTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new PropertyMapRow ());
        }

        public void Visit (StandAloneSigTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (StandAloneSigTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new StandAloneSigRow ());
        }

        public void Visit (TypeDefTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (TypeDefTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new TypeDefRow ());
        }

        public void Visit (TypeRefTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (TypeRefTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new TypeRefRow ());
        }

        public void Visit (TypeSpecTable table)
        {
            table.Rows = new RowCollection (table);
            int number = GetNumberOfRows (typeof (TypeSpecTable));
            for (int i = 0; i < number; i++)
                table.Rows.Add (new TypeSpecRow ());
        }

        public void Terminate(TableCollection coll)
        {
        }
    }
}
